package ru.yandex.practicum.filmorate.service;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import ru.yandex.practicum.filmorate.dal.DirectorRepository;
import ru.yandex.practicum.filmorate.dal.FilmRepository;
import ru.yandex.practicum.filmorate.dal.GenreRepository;
import ru.yandex.practicum.filmorate.dal.LikesRepository;
import ru.yandex.practicum.filmorate.exception.NotFoundException;
import ru.yandex.practicum.filmorate.model.Director;
import ru.yandex.practicum.filmorate.model.Film;
import ru.yandex.practicum.filmorate.model.Genre;
import ru.yandex.practicum.filmorate.storage.FilmStorage;
import ru.yandex.practicum.filmorate.storage.UserStorage;

import java.sql.SQLOutput;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;

@Slf4j
@Service
public class FilmService {
    private final FilmStorage filmStorage;
    private final UserStorage userStorage;
    private final GenreRepository genreRepository;
    private final LikesRepository likesRepository;
    private final FilmRepository filmRepository;
    private final DirectorRepository directorRepository;


    public FilmService(@Autowired @Qualifier("filmRepository") FilmStorage filmStorage,
                       @Autowired @Qualifier("userRepository") UserStorage userStorage,
                       @Autowired GenreRepository genreRepository,
                       @Autowired LikesRepository likesRepository,
                       @Autowired FilmRepository filmRepository,
                       @Autowired DirectorRepository directorRepository) {
        this.filmStorage = filmStorage;
        this.genreRepository = genreRepository;
        this.likesRepository = likesRepository;
        this.userStorage = userStorage;
        this.filmRepository = filmRepository;
        this.directorRepository = directorRepository;
    }

    public Film createFilm(Film film) {
        if (!filmRepository.ratingExists(film.getMpa().getId())) {
            throw new NotFoundException("Rating with ID " + film.getMpa().getId() + " not found");
        }
        Film createdFilm = filmStorage.createFilm(film);
        if (!createdFilm.getGenres().isEmpty()) {
            for (Genre genre : createdFilm.getGenres()) {
                if (!genreRepository.genreExists(genre.getId())) {
                    throw new NotFoundException("Genre with ID " + genre.getId() + " not found");
                }
            }
            genreRepository.addGenres(createdFilm.getId(), createdFilm.getGenres()
                    .stream()
                    .map(Genre::getId)
                    .toList());
        }
        if (!createdFilm.getDirectors().isEmpty()) {
            for (Director director : createdFilm.getDirectors()) {
                if (!directorRepository.directorExists(director.getId())) {
                    throw new NotFoundException("Director with ID " + director.getId() + " not found");
                }
            }
            directorRepository.addDirector(createdFilm.getId(), createdFilm.getDirectors()
                    .stream()
                    .map(Director::getId)
                    .toList());
        }
        return createdFilm;
    }

    public Film updateFilm(Film filmUpdated) {
        Film existingFilm = filmStorage.getFilm(filmUpdated.getId());
        if (existingFilm == null) {
            throw new NotFoundException("–§–∏–ª—å–º —Å ID " + filmUpdated.getId() + " –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }
        if (!filmRepository.ratingExists(filmUpdated.getMpa().getId())) {
            throw new NotFoundException("Rating with ID " + filmUpdated.getMpa().getId() + " not found");
        }

        // üîπ –û–±–Ω–æ–≤–ª—è–µ–º —Å–∞–º —Ñ–∏–ª—å–º
        Film updatedFilm = filmStorage.updateFilm(filmUpdated);

        // üîπ –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –∂–∞–Ω—Ä—ã –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ (–¥–∞–∂–µ –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç)
        genreRepository.delGenres(updatedFilm.getId());
        if (filmUpdated.getGenres() != null && !filmUpdated.getGenres().isEmpty()) {
            genreRepository.addGenres(updatedFilm.getId(), filmUpdated.getGenres()
                    .stream()
                    .map(Genre::getId)
                    .toList());
        }

        // üîπ –£–¥–∞–ª—è–µ–º –≤—Å–µ—Ö —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∂–∏—Å—Å—ë—Ä–æ–≤ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã—Ö (–¥–∞–∂–µ –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç)
        directorRepository.delDirector(updatedFilm.getId());
        if (filmUpdated.getDirectors() != null && !filmUpdated.getDirectors().isEmpty()) {
            directorRepository.addDirector(updatedFilm.getId(), filmUpdated.getDirectors()
                    .stream()
                    .map(Director::getId)
                    .toList());
        }

        return getFilm(updatedFilm.getId()); // ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–ª—å–º —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    }


    public Collection<Film> getFilms() {
        return filmStorage.getFilms();
    }

    public Film getFilm(Integer id) {
        Film film = filmStorage.getFilm(id);
        film.setGenres(new LinkedHashSet<>(genreRepository.getAllGenresByFilmId(film.getId())));
        film.setDirectors(new LinkedHashSet<>(directorRepository.getAllDirectorsByFilmId(film.getId())));
        log.info("–û–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞ —Å ID {}", id);
        return film;
    }

    public void deleteFilm(Integer id) {
        filmStorage.deleteFilm(id);
    }

    public Film likeFilm(Integer filmId, Integer userId) {
        Film film = filmStorage.getFilm(filmId);
        likesRepository.addLike(filmId, userId);
        film.getLikedList().add(userId);
        log.info("User {} liked film {}", userId, filmId);
        return film;
    }

    public void dellikeFilm(Integer id, Integer userId) {
        userStorage.getUserById(userId); // —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        likesRepository.deleteLike(id, userId);
        filmStorage.getFilm(id).getLikedList().remove(userId);
        log.info("–õ–∞–π–∫ –Ω–∞ –§–∏–ª—å–º {} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} —É–±—Ä–∞–Ω(", id, userId);
    }

    public Collection<Film> getTopFilms(Integer count) {
        return filmStorage.getTopFilms(count);
    }
    private Film setGenres(Film film) {
        film.setGenres(genreRepository.getAllGenresByFilmId(film.getId()));
        return film;
    }
    private Film setDirectors(Film film) {
        film.setDirectors(directorRepository.getAllDirectorsByFilmId(film.getId()));
        return film;
    }

    public Collection<Film> getFilmsByDirector(int directorId, String sortBy) {
        checkDirector(directorId);  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ä–µ–∂–∏—Å—Å—ë—Ä–∞

        // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å–º—ã, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –≥–æ–¥—É –∏–ª–∏ –ª–∞–π–∫–∞–º
        Collection<Film> films;
        if ("likes".equalsIgnoreCase(sortBy)) {
            films = filmStorage.getByDirectorId(directorId, "likes");
        } else {
            films = filmStorage.getByDirectorId(directorId, "year");  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≥–æ–¥—É
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∂–∞–Ω—Ä—ã –∏ —Ä–µ–∂–∏—Å—Å—ë—Ä–æ–≤ –¥–ª—è —ç—Ç–∏—Ö —Ñ–∏–ª—å–º–æ–≤
        Map<Integer, List<Genre>> genresByFilmId = genreRepository.getAllByFilms();
        Map<Integer, List<Director>> directorsByFilmId = directorRepository.findAllByFilms();

        // –î–æ–±–∞–≤–ª—è–µ–º –∂–∞–Ω—Ä—ã –∏ —Ä–µ–∂–∏—Å—Å—ë—Ä–æ–≤ –≤ –∫–∞–∂–¥—ã–π —Ñ–∏–ª—å–º
        films.forEach(film -> {
            film.setGenres(genresByFilmId.getOrDefault(film.getId(), List.of()));  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∂–∞–Ω—Ä—ã
            film.setDirectors(directorsByFilmId.getOrDefault(film.getId(), List.of()));  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏—Å—Å—ë—Ä–æ–≤
            System.out.println(film.getId());

        });

        return films;
    }
    private void checkDirector(int directorId) {
        if (directorRepository.getAllDirectorsByFilmId(directorId).isEmpty()) {
            throw new NotFoundException("–†–µ–∂–∏—Å–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }
    }
}
